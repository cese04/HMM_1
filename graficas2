#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Wed Nov 22 15:22:29 2017

@author: carlos
"""

from __future__ import division
import numpy as np
from scipy.stats import *
import scipy.io as sio
import pandas as pd
from ggplot import *
from sklearn.mixture import GaussianMixture
import matplotlib.pyplot as plt


mat_contents = sio.loadmat('3 Paciente 3 M.F.E/3.MAS_FRANCO_AVG.mat')

sign = mat_contents['senal']
#freq = mat_contents['freq']
#freq = freq[0]
#freq = freq[0]
freq = 200

W1 = sio.loadmat('WPac3.mat') #Matriz previamente entrenada de ICA
W = W1['W']


x = np.transpose(sign[:,0:19])
L = np.size(x[0,:])
t = np.linspace(0, (L/freq -1/freq), L)

print np.shape(x)
dr = 200
sig = np.dot(W,x)
x = sig[0:5, :]


# Calculo Teager-Kaiser
t_k = np.zeros_like(x)
for i in range(1,len(x[0,:])-1):
    t_k[:,i] = np.abs((np.abs(x[:,i]) ** 2 - np.abs(x[:,i-1]) * np.abs(x[:,i+1])))


dt = np.zeros((4,int(L/dr)))

# Ventaneo y calculo de caracteristicas
for i in range(int(L/dr)):
    #s = x[i:i+dr]
    s = x[:,i*dr:(i+1)*dr]
    #s = np.reshape(s, (1,np.product(s.shape)))
    s = s.ravel()
    #print np.shape(s)
    #print skew(s)
    #skw.append(skew(s))
    #krt.append(kurtosis(s))
    dt[0,i] = entropy(s**2)
    #print ent[i]
    dt[1,i] = np.sum(t_k[:,i*dr:(i+1)*dr])
    dt[2,i] = skew(s)
    dt[3,i] = kurtosis(s)

dt1 = np.transpose(dt)
bc = []

L2 = np.shape(dt[0,:])[0]
plt.subplot(511)
plt.plot(np.arange(L2), dt[0,:])

plt.subplot(512)
plt.plot(np.arange(L2), dt[1,:])

plt.subplot(513)
plt.plot(np.arange(L2), dt[2,:])

plt.subplot(514)
plt.plot(np.arange(L2), dt[3,:])

plt.show()

#plt.subplot(515)
#plt.plot(np.arange(L2), frec_n[4,:])
#plt.title('cD1')


'''for i in range(3,30):
    km = GaussianMixture(n_components = i, covariance_type = 'diag').fit(dt1)
    bc.append(km.bic(dt1))
    
plt.plot(bc)
plt.show()'''
#%%
km = GaussianMixture(n_components = 7, covariance_type = 'diag').fit(dt1)

vec = km.predict(dt1)

plt.scatter(dt[0,:], dt[1,:], c=vec)
plt.show()

print km.bic(dt1)

#%%
ltr={   1 : "A",
          2 : "B",
          3 : "C",
          4 : "D",
          5 : "E",
          6 : "F",
          7 : "G",
          8 : "H",
          9 : "I",
          10 : "J",
          11 : "K",
          12 : "L",
          13 : "M",
          14 : "N",
          15 : "O",
          16 : "P",
          17 : "R",
          18 : "S",
          19 : "T",
          20 : "U",
          21 : "X",
          22 : "Y",
          }

vec1 = []
for i in range(len(vec)):
    vec1.append(ltr[vec[i]+1])
#mtcrisis = np.where(mat[canal]>0)
df = pd.DataFrame({'Entropia': dt[0, :],
                   'Energia T-K': dt[1, :],
                   'Oblicuidad': dt[2, :],
                   #'Crisis' : mat[canal,tm1:tm2]>0,
                   #'Clasificador' : r3[tm1:tm2],
                   'Curtosis': dt[3, :],
                   'Clase': vec1
                   })


p = ggplot(aes(x='Oblicuidad', y='Entropia', color='Clase'), data=df) \
    + geom_point()\
    #+ scale_color_brewer(type='Qualitative', palette = "Dark2") 
    #+ xlab('Entropia') + scale_x_log(base=20)

p.show()